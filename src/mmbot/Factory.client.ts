/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr} from "./types";
import {InstantiateMsg, ExecuteMsg, STRAGEGY, Binary, QueryMsg, MigrateMsg, MarketMakerBotContractProperties, BotsByOwnerResponse, ConfigResponse, Config} from "./Factory.types";
export interface FactoryReadOnlyInterface {
  contractAddress: string;
  getConfig: () => Promise<ConfigResponse>;
  getBotById: ({
    botId
  }: {
    botId: number;
  }) => Promise<MarketMakerBotContractProperties>;
  getBotsByOwner: ({
    limit,
    owner,
    startAfter
  }: {
    limit?: number;
    owner: Addr;
    startAfter?: number;
  }) => Promise<BotsByOwnerResponse>;
  getBotsByStrategy: ({
    limit,
    startAfter,
    strategy
  }: {
    limit?: number;
    startAfter?: number;
    strategy: STRAGEGY;
  }) => Promise<BotsByOwnerResponse>;
}
export class FactoryQueryClient implements FactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getConfig = this.getConfig.bind(this);
    this.getBotById = this.getBotById.bind(this);
    this.getBotsByOwner = this.getBotsByOwner.bind(this);
    this.getBotsByStrategy = this.getBotsByStrategy.bind(this);
  }

  getConfig = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
  getBotById = async ({
    botId
  }: {
    botId: number;
  }): Promise<MarketMakerBotContractProperties> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bot_by_id: {
        bot_id: botId
      }
    });
  };
  getBotsByOwner = async ({
    limit,
    owner,
    startAfter
  }: {
    limit?: number;
    owner: Addr;
    startAfter?: number;
  }): Promise<BotsByOwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bots_by_owner: {
        limit,
        owner,
        start_after: startAfter
      }
    });
  };
  getBotsByStrategy = async ({
    limit,
    startAfter,
    strategy
  }: {
    limit?: number;
    startAfter?: number;
    strategy: STRAGEGY;
  }): Promise<BotsByOwnerResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bots_by_strategy: {
        limit,
        start_after: startAfter,
        strategy
      }
    });
  };
}
export interface FactoryInterface extends FactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateStrategy: ({
    codeId,
    strategy
  }: {
    codeId: number;
    strategy: STRAGEGY;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin
  }: {
    admin?: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  createBot: ({
    instantiateMsg,
    label,
    strategy
  }: {
    instantiateMsg: Binary;
    label: string;
    strategy: STRAGEGY;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class FactoryClient extends FactoryQueryClient implements FactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateStrategy = this.updateStrategy.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.createBot = this.createBot.bind(this);
  }

  updateStrategy = async ({
    codeId,
    strategy
  }: {
    codeId: number;
    strategy: STRAGEGY;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_strategy: {
        code_id: codeId,
        strategy
      }
    }, _fee, _memo, _funds);
  };
  updateConfig = async ({
    admin
  }: {
    admin?: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin
      }
    }, _fee, _memo, _funds);
  };
  createBot = async ({
    instantiateMsg,
    label,
    strategy
  }: {
    instantiateMsg: Binary;
    label: string;
    strategy: STRAGEGY;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_bot: {
        instantiate_msg: instantiateMsg,
        label,
        strategy
      }
    }, _fee, _memo, _funds);
  };
}