/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr} from "./types";
import {AssetInfo, Uint128, InstantiateMsg, Config, MakeOrdersConfigInstantiate, ExecuteMsg, Decimal, IndexPriceType, MakeOrdersConfig, QueryMsg, MigrateMsg, GetBalancesResponse, Asset} from "./MakeProfit.types";
export interface MakeProfitReadOnlyInterface {
  contractAddress: string;
  getConfig: () => Promise<Config>;
  getMakeOrdersConfig: () => Promise<MakeOrdersConfig>;
  getBalances: () => Promise<GetBalancesResponse>;
}
export class MakeProfitQueryClient implements MakeProfitReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getConfig = this.getConfig.bind(this);
    this.getMakeOrdersConfig = this.getMakeOrdersConfig.bind(this);
    this.getBalances = this.getBalances.bind(this);
  }

  getConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
  getMakeOrdersConfig = async (): Promise<MakeOrdersConfig> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_make_orders_config: {}
    });
  };
  getBalances = async (): Promise<GetBalancesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_balances: {}
    });
  };
}
export interface MakeProfitInterface extends MakeProfitReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setPause: ({
    permission
  }: {
    permission: boolean;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateMakeOrdersConfig: ({
    makeOrdersConfig
  }: {
    makeOrdersConfig: MakeOrdersConfig;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    config
  }: {
    config: Config;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  cancelAllOrders: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  cancelAllDifferOrders: ({
    indexPrice
  }: {
    indexPrice: Decimal;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  makeOrders: ({
    oraclePrice
  }: {
    oraclePrice: Decimal;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  generateOrders: ({
    indexPrice,
    oraclePrice
  }: {
    indexPrice: Decimal;
    oraclePrice: Decimal;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: (_fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MakeProfitClient extends MakeProfitQueryClient implements MakeProfitInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setPause = this.setPause.bind(this);
    this.updateMakeOrdersConfig = this.updateMakeOrdersConfig.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.cancelAllOrders = this.cancelAllOrders.bind(this);
    this.cancelAllDifferOrders = this.cancelAllDifferOrders.bind(this);
    this.makeOrders = this.makeOrders.bind(this);
    this.generateOrders = this.generateOrders.bind(this);
    this.withdraw = this.withdraw.bind(this);
  }

  setPause = async ({
    permission
  }: {
    permission: boolean;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_pause: {
        permission
      }
    }, _fee, _memo, _funds);
  };
  updateMakeOrdersConfig = async ({
    makeOrdersConfig
  }: {
    makeOrdersConfig: MakeOrdersConfig;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_make_orders_config: {
        make_orders_config: makeOrdersConfig
      }
    }, _fee, _memo, _funds);
  };
  updateConfig = async ({
    config
  }: {
    config: Config;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        config
      }
    }, _fee, _memo, _funds);
  };
  cancelAllOrders = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_all_orders: {}
    }, _fee, _memo, _funds);
  };
  cancelAllDifferOrders = async ({
    indexPrice
  }: {
    indexPrice: Decimal;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_all_differ_orders: {
        index_price: indexPrice
      }
    }, _fee, _memo, _funds);
  };
  makeOrders = async ({
    oraclePrice
  }: {
    oraclePrice: Decimal;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      make_orders: {
        oracle_price: oraclePrice
      }
    }, _fee, _memo, _funds);
  };
  generateOrders = async ({
    indexPrice,
    oraclePrice
  }: {
    indexPrice: Decimal;
    oraclePrice: Decimal;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      generate_orders: {
        index_price: indexPrice,
        oracle_price: oraclePrice
      }
    }, _fee, _memo, _funds);
  };
  withdraw = async (_fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {}
    }, _fee, _memo, _funds);
  };
}