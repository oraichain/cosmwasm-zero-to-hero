"use strict";
/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.CwStarterClient = exports.CwStarterQueryClient = void 0;
class CwStarterQueryClient {
    constructor(client, contractAddress) {
        this.allPolls = async () => {
            return this.client.queryContractSmart(this.contractAddress, {
                all_polls: {}
            });
        };
        this.poll = async ({ pollId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                poll: {
                    poll_id: pollId
                }
            });
        };
        this.getVote = async ({ address, pollId }) => {
            return this.client.queryContractSmart(this.contractAddress, {
                vote: {
                    address,
                    poll_id: pollId
                }
            });
        };
        this.client = client;
        this.contractAddress = contractAddress;
        this.allPolls = this.allPolls.bind(this);
        this.poll = this.poll.bind(this);
        this.getVote = this.getVote.bind(this);
    }
}
exports.CwStarterQueryClient = CwStarterQueryClient;
class CwStarterClient extends CwStarterQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.createPoll = async ({ options, pollId, question }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                create_poll: {
                    options,
                    poll_id: pollId,
                    question
                }
            }, _fee, _memo, _funds);
        };
        this.vote = async ({ pollId, vote }, _fee = "auto", _memo, _funds) => {
            return await this.client.execute(this.sender, this.contractAddress, {
                vote: {
                    poll_id: pollId,
                    vote
                }
            }, _fee, _memo, _funds);
        };
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.createPoll = this.createPoll.bind(this);
        this.vote = this.vote.bind(this);
    }
}
exports.CwStarterClient = CwStarterClient;
//# sourceMappingURL=CwStarter.client.js.map